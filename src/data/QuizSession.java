package data;

import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Random;

import javax.servlet.http.HttpServletRequest;

import sql.SQL;

/**
 * Represents a single attempt to take a quiz. Has no database counterpart, but
 * may involve writes to the SQL database when the quiz is completed and is used
 * for scoring: creates a History entry to show that the test was completed.
 * 
 * @author Kevin
 *
 */
public class QuizSession {
	// The user taking the quiz
	private Account acc;

	// The quiz being taken
	private Quiz quiz;

	// Whether or not this session is being taken for a score
	private boolean forScore;

	// A collection of previously submitted parameters to forms containing the
	// quiz answers. This represents the cumulative submission of all quiz answers
	// so far using the forms generated by Question.
	private HashMap<String, String> responseParams;

	// Represents the index of the last question presented to the user from within
	// quiz. If no questions have been presented, this should be equal to -1. If
	// all questions have been presented, this should be equal to the total number
	// of questions in the quiz.
	private int lastSeenQuestionIndex;

	// Represents when the quiz was started.
	private Date timeStarted;

	// Random ordering if quiz supports random ordering.
	private int[] randomOrdering;

	/**
	 * Constructor for a new QuizSession. Should be constructed whenever a user
	 * wants to take a quiz.
	 * 
	 * @param acc
	 *          The account taking the quiz.
	 * @param quiz
	 *          The quiz wanting to be taken.
	 * @param forScore
	 *          Whether or not this run is for a score (if not, then it is a
	 *          practice test).
	 * @throws SQLException
	 *           If the SQL operations fail.
	 */
	public QuizSession(Account acc, Quiz quiz, boolean forScore)
			throws SQLException {
		this.acc = acc;
		this.quiz = quiz;
		if (quiz.isRandomOrder()) {
			randomOrdering = new int[quiz.getTotalQuestions()];
			for (int i = 0; i < randomOrdering.length; i++) {
				randomOrdering[i] = i;
			}
			// Shuffle randomOrdering using StackOverflow solution
			Random r = new Random();
			for (int i = randomOrdering.length - 1; i > 0; i--) {
				int index = r.nextInt(i + 1);
				// Simple swap
				int a = randomOrdering[index];
				randomOrdering[index] = randomOrdering[i];
				randomOrdering[i] = a;
			}
		}
		this.forScore = forScore;
		responseParams = new HashMap<String, String>();
		lastSeenQuestionIndex = -1;
		timeStarted = new Date();
	}

	/**
	 * Retrieves a parameter sent by the user via POSTing to a generated
	 * question's answer area.
	 * 
	 * @param paramName
	 *          The unique name of the parameter.
	 * @return The value of the parameter if any, or null.
	 */
	public String getResponseParam(String paramName) {
		return responseParams.get(paramName);
	}

	/**
	 * Takes a POST by the quiz taker and adds all POSTed parameters and adds them
	 * to responseParams. If any new POSTed parameters already exist in
	 * responseParams, do not update or add them and simply ignore them. Each time
	 * a user visits the answer question Servlet,
	 * 
	 * @param req
	 *          The HttpServletRequest that accompanies the POST made by the user
	 *          when submitting a quiz answer.
	 */
	public void addNewResponses(HttpServletRequest req) {
		for (Enumeration<String> e = req.getParameterNames(); e.hasMoreElements();) {
			String newParam = e.nextElement();
			if (!responseParams.containsKey(newParam)) {
				responseParams.put(newParam, req.getParameter(newParam));
			}
		}
	}

	/**
	 * Gets the quiz being taken.
	 * 
	 * @return The quiz being taken.
	 */
	public Quiz getQuiz() {
		return quiz;
	}

	/**
	 * Gets whether this run is for a score or not.
	 * 
	 * @return True if the quiz should be scored.
	 */
	public boolean isForScore() {
		return forScore;
	}

	/**
	 * Gets the last seen question. Used for multiple page mode, when only one
	 * question can be sent to the user at a time.
	 * 
	 * @return The last question presented to the user
	 * @throws SQLException
	 *           If the SQL operations fail.
	 */
	public Question getLastSeenQuestion() throws SQLException {
		return quiz.getQuestion(randomOrdering == null ? lastSeenQuestionIndex
				: randomOrdering[lastSeenQuestionIndex]);
	}

	/**
	 * Advances to the next question, getting that question.
	 * 
	 * @return The next question to be presented to the user or null if no more
	 *         questions exist.
	 * @throws SQLException
	 *           If the SQL operations fail.
	 */
	public Question advanceQuestion() throws SQLException {
		lastSeenQuestionIndex++;
		return quiz.getQuestion(randomOrdering == null ? lastSeenQuestionIndex
				: randomOrdering[lastSeenQuestionIndex]);
	}

	/**
	 * Gets the nth seen question.
	 * 
	 * @param index
	 *          The index of the question requested.
	 * @return The nth question presented to the user.
	 * @throws SQLException
	 *           If the SQL operations fail.
	 */
	public Question getNthSeenQuestion(int index) throws SQLException {
		return quiz.getQuestion(randomOrdering == null ? index
				: randomOrdering[index]);
	}

	/**
	 * Marks the completion of the quiz. If the test was taken for score, add a
	 * HistoryEntry row to the SQL database for this QuizSession.
	 */
	public History finishQuiz() throws SQLException {
		Date timeFinished = new Date();
		Date timeTaken = new Date(timeFinished.getTime() - timeStarted.getTime());
		int score = 0;
		int totalQuestions = quiz.getTotalQuestions();
		for (int i = 0; i < totalQuestions; i++) {
			score += getNthSeenQuestion(i).getCorrectPoints(this);
		}
		History result = new History(acc.getId(), quiz.getId(), score, timeStarted,
				timeTaken);
		if (forScore) {
			Statement s = SQL.getStatement();
			s.executeUpdate(String.format("INSERT INTO HistoryEntries "
					+ "(UserID, QuizID, Score, TimeBegun, TimeTaken) VALUES "
					+ "(%d, %d, %d, %s, %s);", acc.getId(), quiz.getId(), score,
					SQL.convertDateToSQLDate(timeStarted),
					SQL.convertDateToSQLTime(timeTaken)));
			s.close();
		}
		return result;
	}
}

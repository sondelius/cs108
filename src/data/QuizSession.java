package data;

import java.sql.SQLException;
import java.util.Date;
import java.util.HashMap;

import javax.servlet.http.HttpServletRequest;

/**
 * Represents a single attempt to take a quiz. Has no database counterpart, but
 * may involve writes to the SQL database when the quiz is completed and is used
 * for scoring: creates a History entry to show that the test was completed.
 * 
 * @author Kevin
 *
 */
public class QuizSession {
	// The user taking the quiz
	private Account acc;

	// The quiz being taken
	private Quiz quiz;

	// Whether or not this session is being taken for a score
	private boolean forScore;

	// A collection of previously submitted parameters to forms containing the
	// quiz answers. This represents the cumulative submission of all quiz answers
	// so far using the forms generated by Question.
	private HashMap<String, String> responseParams;

	// Represents the index of the last question presented to the user from within
	// quiz. If no questions have been presented, this should be equal to -1. If
	// all questions have been presented, this should be equal to the total number
	// of questions in the quiz.
	private int lastSeenQuestionIndex;

	// Represents when the quiz was started.
	private Date timeStarted;

	/**
	 * Constructor for a new QuizSession. Should be constructed whenever a user
	 * wants to take a quiz.
	 * 
	 * @param acc
	 *          The account taking the quiz.
	 * @param quiz
	 *          The quiz wanting to be taken.
	 * @param forScore
	 *          Whether or not this run is for a score (if not, then it is a
	 *          practice test).
	 */
	public QuizSession(Account acc, Quiz quiz, boolean forScore) {
		// TODO: set instance variables and create new responseParams; set
		// timeStarted to the current time using new Date()
	}

	/**
	 * Retrieves a parameter sent by the user via POSTing to a generated
	 * question's answer area.
	 * 
	 * @param paramName
	 *          The unique name of the parameter.
	 * @return The value of the parameter if any, or null.
	 */
	public String getResponseParam(String paramName) {
		// TODO: check the responseParams to see whether a given key exists, then
		// return the value if it exists or null if it doesn't exist.
		return null;
	}

	/**
	 * Takes a POST by the quiz taker and adds all POSTed parameters and adds them
	 * to responseParams. If any new POSTed parameters already exist in
	 * responseParams, do not update or add them and simply ignore them. Each time
	 * a user visits the answer question Servlet,
	 * 
	 * @param req
	 *          The HttpServletRequest that accompanies the POST made by the user
	 *          when submitting a quiz answer.
	 */
	public void addNewResponses(HttpServletRequest req) {
		// TODO: iterate through the POST parameters returned by getParameterMap,
		// seeing if they already exist in responseParams. If any new parameters are
		// seen, add them to responseParams.
	}

	/**
	 * Gets the quiz being taken.
	 * 
	 * @return The quiz being taken.
	 */
	public Quiz getQuiz() {
		// TODO: return the quiz being taken.
		return null;
	}

	/**
	 * Gets whether this run is for a score or not.
	 * 
	 * @return True if the quiz should be scored.
	 */
	public boolean isForScore() {
		// TODO: return whether this is being taken for a score or not
		return false;
	}

	/**
	 * Gets the last seen question. Used for multiple page mode, when only one
	 * question can be sent to the user at a time.
	 * 
	 * @return The last question presented to the user
	 */
	public Question getLastSeenQuestion() {
		// TODO: grab the nth question from quiz and return that, where n is the
		// index stored in lastSeenQuestionIndex.
		return null;
	}

	/**
	 * Advances to the next question, getting that question.
	 * 
	 * @return The next question to be presented to the user or null if no more
	 *         questions exist.
	 */
	public Question advanceQuestion() {
		// TODO: increment n and then grab the nth question from quiz and return
		// that, where n is the index stored in lastSeenQuestionIndex. If n is the
		// last question, return
		// null.
		return null;
	}

	/**
	 * Marks the completion of the quiz. If the test was taken for score, add a
	 * HistoryEntry row to the SQL database for this QuizSession.
	 */
	public History finishQuiz() throws SQLException {
		// TODO: set the time ended to the current time using new Date(). If the
		// test was taken for a score, calculate the time taken by taking a
		// difference between the time ended and time started and create a History
		// object with the appropriate data. At the same time, add an entry into the
		// SQL table in HistoryEntry to reflect this test attempt.

		return null;
	}

}
